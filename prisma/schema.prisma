// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// tabel categories mempunyai relasi dengan tabel product one to many (karena 1 categories bisa digunakan dalam beberapa product pada tabel products)
model categories {
  id Int @id @default(autoincrement())
  title String @db.VarChar(255) @unique // memastikan title tidak boleh sama dalam 1 table
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  // Relasi ke products
  products  products[]  // Satu category bisa punya banyak products
}

// tabel product
model products {
  id Int @id @default(autoincrement()) // sama dengan serial kalo di postgres  @id artinya id akan dianggap sebagai primery key
  title String @db.VarChar(255)  // not null
  description String? @db.Text // boleh null
  price Float  @db.DoublePrecision
  quantity Int @default(0) @db.Integer
  createdAt DateTime @default(now()) // menyimpan data saat di buat
  updateAt DateTime @updatedAt // menyimpan data saat ada perubahan

  // relasi dengan tabel category
  categoryId Int
  categories categories @relation(fields: [categoryId], references: [id]) // berelasi dengan  tabel category references id
}

// tabel customers berelasi dengan tabel wallets/dompet , one to one (karena 1 customer hanya boleh mempunyai 1 wallet )
model customers {
  id Int @id @default(autoincrement())
  email String @db.VarChar(100) @unique
  firstName String @db.VarChar(100)
  lastName String? @db.VarChar(100)

  // kolom header wallet yang menyimpan relasi antara table wallet dengan menampikna id customer
  wallet  wallets[]  // Satu wallet  hanya bisa dimiliki oleh 1 customer
  
}

// tabel wallet
model wallets {
  id Int @id @default(autoincrement())
  balance Int @db.Integer

  // relasi dengan tabel customer 
  customerId Int @unique // maka dengan id yang dijadikan forign key seperti ini maka dipastikan relasi nya one to one karena customerId tidak boleh ada yang sama dengan nilai disetiap data 
  customer customers @relation(fields: [customerId], references: [id])
}
